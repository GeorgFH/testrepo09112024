name: Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    strategy:
      max-parallel: 4
      matrix:
        java-version: ["23"]


    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser       # Benutzername f체r die Datenbank
          POSTGRES_PASSWORD: testpass   # Passwort f체r die Datenbank
          POSTGRES_DB: testdb           # Name der Datenbank
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "${{ matrix.java-version }}"
          distribution: "corretto"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      # Debugging: Datenbankverbindung testen
      - name: Test Database Connection
        run: |
          psql -h localhost -U testuser -d testdb -c '\l'
        env:
          PGPASSWORD: testpass

      # Unit Tests ausf체hren
      - name: Run Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpass
        run: ./gradlew test -Dspring.profiles.active=pipeline

      # Debugging: Test-Logs anzeigen
      - name: Display Test Logs
        if: failure()  # Nur anzeigen, wenn ein Schritt fehlschl채gt
        run: cat build/reports/tests/test/index.html

  conform:
    runs-on: ubuntu-latest
    name: Conform

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: siderolabs/conform@v0.1.0-alpha.27
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  spectral:
    name: Spectral Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: stoplightio/spectral
          extension-matching: disable
          rename-to: spectral
          chmod: 0755

      - run: |
          spectral lint 'docs/**/*.yaml' --fail-severity info
          spectral lint 'docs/**/*.yml' --fail-severity info

  yamllint:
    name: YAMLLint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install YAMLLint
        run: pip install yamllint

      - run: yamllint docs/

  build:
    runs-on: ubuntu-latest
    name: Build and Package Application
    needs: test
    strategy:
      max-parallel: 4
      matrix:
        java-version: ["23"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "${{ matrix.java-version }}"
          distribution: "corretto"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build Jar
        run: ./gradlew bootJar

      - name: Upload JAR as an artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: build/libs/*.jar